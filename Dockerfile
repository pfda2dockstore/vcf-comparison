# Generated by precisionFDA exporter (v1.0.3) on 2018-06-14 03:40:45 +0000
# The asset download links in this file are valid only for 24h.

# Exported app: vcf-comparison, revision: 3, authored by: george.asimenos
# https://precision.fda.gov/apps/app-BqB9XZ8006ZZ2g5KzGXP3fpq

# For more information please consult the app export section in the precisionFDA docs

# Start with Ubuntu 14.04 base image
FROM ubuntu:14.04

# Install default precisionFDA Ubuntu packages
RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y \
	aria2 \
	byobu \
	cmake \
	cpanminus \
	curl \
	dstat \
	g++ \
	git \
	htop \
	libboost-all-dev \
	libcurl4-openssl-dev \
	libncurses5-dev \
	make \
	perl \
	pypy \
	python-dev \
	python-pip \
	r-base \
	ruby1.9.3 \
	wget \
	xz-utils

# Install default precisionFDA python packages
RUN pip install \
	requests==2.5.0 \
	futures==2.2.0 \
	setuptools==10.2

# Add DNAnexus repo to apt-get
RUN /bin/bash -c "echo 'deb http://dnanexus-apt-prod.s3.amazonaws.com/ubuntu trusty/amd64/' > /etc/apt/sources.list.d/dnanexus.list"
RUN /bin/bash -c "echo 'deb http://dnanexus-apt-prod.s3.amazonaws.com/ubuntu trusty/all/' >> /etc/apt/sources.list.d/dnanexus.list"
RUN curl https://wiki.dnanexus.com/images/files/ubuntu-signing-key.gpg | apt-key add -

# Update apt-get
RUN DEBIAN_FRONTEND=noninteractive apt-get update

# Download app assets
RUN curl https://dl.dnanex.us/F/D/y1bBpgQvJ01z4B11GYBqX5x6KGg08XjB7Q03jypK/bedtools-2.25.tar.gz | tar xzf - -C / --no-same-owner --no-same-permissions
RUN curl https://dl.dnanex.us/F/D/9yX7JF813qB6QKK1Zx0V6V3qzJgF26V9jY570366/htslib-1.3.tar.gz | tar xzf - -C / --no-same-owner --no-same-permissions
RUN curl https://dl.dnanex.us/F/D/q2yX8GK8bqkp1jq6yjGx1Y3b3gpg9yq0f7x2X7Bv/rtg-hs37d5.tar | tar xf - -C / --no-same-owner --no-same-permissions
RUN curl https://dl.dnanex.us/F/D/q47FGvQ6B30ZvvGj4g490jjZgPXB9GkFpvKk1JVB/rtg-tools-3.5.1.tar.gz | tar xzf - -C / --no-same-owner --no-same-permissions

# Download helper executables
RUN curl https://dl.dnanex.us/F/D/0K8P4zZvjq9vQ6qV0b6QqY1z2zvfZ0QKQP4gjBXp/emit-1.0.tar.gz | tar xzf - -C /usr/bin/ --no-same-owner --no-same-permissions
RUN curl https://dl.dnanex.us/F/D/bByKQvv1F7BFP3xXPgYXZPZjkXj9V684VPz8gb7p/run-1.2.tar.gz | tar xzf - -C /usr/bin/ --no-same-owner --no-same-permissions

# Write app spec and code to root folder
RUN ["/bin/bash","-c","echo -E \\{\\\"spec\\\":\\{\\\"input_spec\\\":\\[\\{\\\"name\\\":\\\"test_vcf\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"Test\\ VCF\\\",\\\"help\\\":\\\"The\\ GRCh37\\ VCF\\ \\(ideally\\ compressed\\ with\\ bgzip\\)\\ with\\ the\\ test\\ set\\ variants\\\"\\},\\{\\\"name\\\":\\\"test_bed\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":true,\\\"label\\\":\\\"Test\\ BED\\\",\\\"help\\\":\\\"An\\ optional\\ BED\\ file\\ whose\\ coordinates\\ will\\ be\\ used\\ to\\ constraint\\ the\\ comparison\\\"\\},\\{\\\"name\\\":\\\"ref_vcf\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"Benchmark\\ VCF\\\",\\\"help\\\":\\\"The\\ GRCh37\\ VCF\\ \\(ideally\\ compressed\\ with\\ bgzip\\)\\ with\\ the\\ benchmark\\ set\\ variants\\\"\\},\\{\\\"name\\\":\\\"ref_bed\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":true,\\\"label\\\":\\\"Benchmark\\ BED\\\",\\\"help\\\":\\\"An\\ optional\\ BED\\ file\\ whose\\ coordinates\\ will\\ be\\ used\\ to\\ constraint\\ the\\ comparison\\\"\\}\\],\\\"output_spec\\\":\\[\\{\\\"name\\\":\\\"fn_vcf\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"False\\ negatives\\ -\\ Benchmark\\ \\(VCF\\)\\\",\\\"help\\\":\\\"\\\"\\},\\{\\\"name\\\":\\\"fn_tbi\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"False\\ negatives\\ -\\ Benchmark\\ \\(TBI\\)\\\",\\\"help\\\":\\\"\\\"\\},\\{\\\"name\\\":\\\"fp_vcf\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"False\\ positives\\ -\\ Test\\ \\(VCF\\)\\\",\\\"help\\\":\\\"\\\"\\},\\{\\\"name\\\":\\\"fp_tbi\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"False\\ positives\\ -\\ Test\\ \\(TBI\\)\\\",\\\"help\\\":\\\"\\\"\\},\\{\\\"name\\\":\\\"tp_vcf\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"True\\ positives\\ -\\ Benchmark\\ \\(VCF\\)\\\",\\\"help\\\":\\\"\\\"\\},\\{\\\"name\\\":\\\"tp_tbi\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"True\\ positives\\ -\\ Benchmark\\ \\(TBI\\)\\\",\\\"help\\\":\\\"\\\"\\},\\{\\\"name\\\":\\\"vcfeval_log\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"Vcfeval\\ Log\\\",\\\"help\\\":\\\"\\\"\\},\\{\\\"name\\\":\\\"summary_txt\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"Summary\\ Text\\\",\\\"help\\\":\\\"\\\"\\},\\{\\\"name\\\":\\\"weighted_roc_tsv\\\",\\\"class\\\":\\\"file\\\",\\\"optional\\\":false,\\\"label\\\":\\\"Weighted\\ Precision-vs-Recall\\ Curve\\\",\\\"help\\\":\\\"\\\"\\}\\],\\\"internet_access\\\":false,\\\"instance_type\\\":\\\"baseline-8\\\"\\},\\\"assets\\\":\\[\\\"file-Bk5K5yj0qVb1VgP6pVJPyv8p\\\",\\\"file-BpBq6GQ0qVb40z0FGk4ZYjkY\\\",\\\"file-BqB6zV80qVb8Xb31P0B97jPg\\\",\\\"file-BqB6z080qVbGxy16X0Fk5Xq5\\\"\\],\\\"packages\\\":\\[\\]\\} \u003e /spec.json"]
RUN ["/bin/bash","-c","echo -E \\{\\\"code\\\":\\\"\\#\\ Use\\ htsfile\\ to\\ sniff\\ the\\ file\\ type\\ of\\ each\\ given\\ VCF\\\\ntest_kind\\=\\$\\(htsfile\\ \\\\\\\"\\$test_vcf_path\\\\\\\"\\ \\|\\ cut\\ -f2\\)\\\\nref_kind\\=\\$\\(htsfile\\ \\\\\\\"\\$ref_vcf_path\\\\\\\"\\ \\|\\ cut\\ -f2\\)\\\\n\\\\n\\#\\ Check\\ the\\ test\\ VCF\\ for\\ any\\ required\\ compression\\ or\\ indexing\\\\nif\\ \\[\\[\\ \\\\\\\"\\$test_kind\\\\\\\"\\ \\=\\~\\ \\'variant\\ calling\\ text\\'\\$\\ \\]\\]\\;\\ then\\\\n\\ \\ bgzip\\ \\\\\\\"\\$test_vcf_path\\\\\\\"\\\\n\\ \\ test_vcf_path\\=\\\\\\\"\\$test_vcf_path\\\\\\\".gz\\\\n\\ \\ tabix\\ -p\\ vcf\\ \\\\\\\"\\$test_vcf_path\\\\\\\"\\\\nelif\\ \\[\\[\\ \\\\\\\"\\$test_kind\\\\\\\"\\ \\=\\~\\ \\'gzip-compressed\\ variant\\ calling\\ data\\'\\$\\ \\]\\]\\;\\ then\\\\n\\ \\ zcat\\ \\\\\\\"\\$test_vcf_path\\\\\\\"\\ \\|\\ bgzip\\ \\\\u003etmpfile\\\\n\\ \\ mv\\ -f\\ tmpfile\\ \\\\\\\"\\$test_vcf_path\\\\\\\"\\\\n\\ \\ tabix\\ -p\\ vcf\\ \\\\\\\"\\$test_vcf_path\\\\\\\"\\\\nelif\\ \\[\\[\\ \\\\\\\"\\$test_kind\\\\\\\"\\ \\=\\~\\ \\'BGZF-compressed\\ variant\\ calling\\ data\\'\\$\\ \\]\\]\\;\\ then\\\\n\\ \\ tabix\\ -p\\ vcf\\ \\\\\\\"\\$test_vcf_path\\\\\\\"\\\\nelse\\\\n\\ \\ echo\\ \\\\\\\"Invalid\\ test\\ VCF\\ file\\ \\(\\$test_kind\\)\\\\\\\"\\\\n\\ \\ exit\\ 1\\\\nfi\\\\n\\\\n\\#\\ Check\\ the\\ benchmark\\ VCF\\ for\\ any\\ required\\ compression\\ or\\ indexing\\\\nif\\ \\[\\[\\ \\\\\\\"\\$ref_kind\\\\\\\"\\ \\=\\~\\ \\'variant\\ calling\\ text\\'\\$\\ \\]\\]\\;\\ then\\\\n\\ \\ bgzip\\ \\\\\\\"\\$ref_vcf_path\\\\\\\"\\\\n\\ \\ ref_vcf_path\\=\\\\\\\"\\$ref_vcf_path\\\\\\\".gz\\\\n\\ \\ tabix\\ -p\\ vcf\\ \\\\\\\"\\$ref_vcf_path\\\\\\\"\\\\nelif\\ \\[\\[\\ \\\\\\\"\\$ref_kind\\\\\\\"\\ \\=\\~\\ \\'gzip-compressed\\ variant\\ calling\\ data\\'\\$\\ \\]\\]\\;\\ then\\\\n\\ \\ zcat\\ \\\\\\\"\\$ref_vcf_path\\\\\\\"\\ \\|\\ bgzip\\ \\\\u003etmpfile\\\\n\\ \\ mv\\ -f\\ tmpfile\\ \\\\\\\"\\$ref_vcf_path\\\\\\\"\\\\n\\ \\ tabix\\ -p\\ vcf\\ \\\\\\\"\\$ref_vcf_path\\\\\\\"\\\\nelif\\ \\[\\[\\ \\\\\\\"\\$ref_kind\\\\\\\"\\ \\=\\~\\ \\'BGZF-compressed\\ variant\\ calling\\ data\\'\\$\\ \\]\\]\\;\\ then\\\\n\\ \\ tabix\\ -p\\ vcf\\ \\\\\\\"\\$ref_vcf_path\\\\\\\"\\\\nelse\\\\n\\ \\ echo\\ \\\\\\\"Invalid\\ benchmark\\ VCF\\ file\\ \\(\\$ref_kind\\)\\\\\\\"\\\\n\\ \\ exit\\ 1\\\\nfi\\\\n\\\\n\\#\\ Set\\ up\\ RTG\\ vcfeval\\ options\\\\nrtg_opts\\=\\(\\\\\\\"vcfeval\\\\\\\"\\ \\\\\\\"--baseline\\=\\$ref_vcf_path\\\\\\\"\\ \\\\\\\"--calls\\=\\$test_vcf_path\\\\\\\"\\ \\\\\\\"--output\\=./results/\\\\\\\"\\ \\\\\\\"--template\\=hs37d5.sdf\\\\\\\"\\)\\\\n\\\\n\\#\\ Handle\\ zero,\\ one\\ or\\ two\\ BED\\ files\\\\nif\\ \\[\\[\\ \\\\\\\"\\$test_bed\\\\\\\"\\ \\!\\=\\ \\\\\\\"\\\\\\\"\\ \\\\u0026\\\\u0026\\ \\\\\\\"\\$ref_bed\\\\\\\"\\ \\!\\=\\ \\\\\\\"\\\\\\\"\\ \\]\\]\\;\\ then\\\\n\\ \\ bedtools\\ intersect\\ -a\\ \\\\\\\"\\$test_bed_path\\\\\\\"\\ -b\\ \\\\\\\"\\$ref_bed_path\\\\\\\"\\ \\\\u003e\\ intersect.bed\\\\n\\ \\ rtg_opts\\+\\=\\(\\\\\\\"--bed-regions\\=intersect.bed\\\\\\\"\\)\\\\nelif\\ \\[\\[\\ \\\\\\\"\\$test_bed\\\\\\\"\\ \\!\\=\\ \\\\\\\"\\\\\\\"\\ \\]\\]\\;\\ then\\\\n\\ \\ rtg_opts\\+\\=\\(\\\\\\\"--bed-regions\\=\\$test_bed_path\\\\\\\"\\)\\\\nelif\\ \\[\\[\\ \\\\\\\"\\$ref_bed\\\\\\\"\\ \\!\\=\\ \\\\\\\"\\\\\\\"\\ \\]\\]\\;\\ then\\\\n\\ \\ rtg_opts\\+\\=\\(\\\\\\\"--bed-regions\\=\\$ref_bed_path\\\\\\\"\\)\\\\nfi\\\\n\\\\n\\#\\ Run\\ RTG\\ vcfeval\\\\n/opt/rtg/rtg\\ \\\\\\\"\\$\\{rtg_opts\\[@\\]\\}\\\\\\\"\\\\n\\\\n\\#\\ Mark\\ outputs\\\\nemit\\ fn_vcf\\ results/fn.vcf.gz\\\\nemit\\ fn_tbi\\ results/fn.vcf.gz.tbi\\\\nemit\\ fp_vcf\\ results/fp.vcf.gz\\\\nemit\\ fp_tbi\\ results/fp.vcf.gz.tbi\\\\nemit\\ tp_vcf\\ results/tp.vcf.gz\\\\nemit\\ tp_tbi\\ results/tp.vcf.gz.tbi\\\\nemit\\ vcfeval_log\\ results/vcfeval.log\\\\nemit\\ summary_txt\\ results/summary.txt\\\\ngunzip\\ results/weighted_roc.tsv.gz\\\\nemit\\ weighted_roc_tsv\\ results/weighted_roc.tsv\\\\n\\\\n\\\"\\} | python -c 'import sys,json; print json.load(sys.stdin)[\"code\"]' \u003e /script.sh"]

# Create directory /work and set it to $HOME and CWD
RUN mkdir -p /work
ENV HOME="/work"
WORKDIR /work

# Set entry point to container
ENTRYPOINT ["/usr/bin/run"]

VOLUME /data
VOLUME /work